{"version":3,"sources":["ProjectEntry.js","PageAbout.js","App.js","serviceWorker.js","index.js"],"names":["ProjectEntry","readData","Jdata","map","data","bodyData","image","body","i","length","b","text","push","break","React","createElement","key","link","href","src","im","type","react_default","a","Image_default","className","rounded","fluid","roundedCircle","id","toString","title","date","align","Jumbotron_default","Container_default","Component","PageAbout","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","pageState","src_ProjectEntry","e","page","setState","src_PageAbout","_this2","Navbar_default","collapseOnSelect","expand","bg","variant","sticky","Toggle","aria-controls","Collapse","Nav_default","Link","onClick","onMouseClick","Brand","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.86cfc901.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Jdata from './projectEntryData.json';\r\nimport Image from 'react-bootstrap/Image';\r\nimport Jumbotron from 'react-bootstrap/Jumbotron'\r\nimport Container from 'react-bootstrap/Container'\r\n\r\nclass ProjectEntry extends Component {\r\n  render() {\r\n    let readData = Jdata.map((data) => {\r\n      let bodyData = [];\r\n      let image = [];\r\n      if (data.body) {\r\n        for (let i = 0; i < data.body.length; i++) {\r\n          let b = data.body[i];\r\n          if (b.text) {\r\n            bodyData.push(b.text);\r\n          }\r\n          if (b.break) {\r\n            bodyData.push(React.createElement('p',{key:b.break}));\r\n          }\r\n          if (b.link) {\r\n            bodyData.push(React.createElement('a',{key:b.link,href:b.src},b.link));\r\n          }\r\n        }\r\n      }\r\n      if (data.image) {\r\n        for (let i = 0; i < data.image.length; i++) {\r\n          let im = data.image[i];\r\n          if (im.type === \"rounded\") {\r\n            image.push(<a href={im.link}><Image src={im.src} className={im.className} rounded fluid /></a>);\r\n          }\r\n          if (im.type === \"roundedCircle\") {\r\n            image.push(<a href={im.link}><Image src={im.src} className={im.className} roundedCircle fluid /></a>);\r\n          }\r\n        }\r\n      }\r\n      return (\r\n      <div id={'entry'+data.id.toString()} key={data.id}>\r\n        <div><h2>{data.title}</h2></div>\r\n        <p>Date: {data.date}</p>\r\n        <div>{bodyData}</div>\r\n        <div align=\"center\">{image}</div>\r\n        <hr />\r\n      </div>\r\n      );\r\n    });\r\n    return (\r\n      <div>\r\n        <Jumbotron fluid id=\"jumbo\">\r\n          <Container>\r\n            <h1 className=\"display-4\">PROJECTS</h1>\r\n            <p className=\"lead\">A showcase of my coding projects - Continuous learning and exploration through creative works:</p>\r\n          </Container>\r\n        </Jumbotron>\r\n        <Container>{readData}</Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProjectEntry\r\n","import React, { Component } from 'react';\r\nimport Jumbotron from 'react-bootstrap/Jumbotron'\r\nimport Container from 'react-bootstrap/Container'\r\n\r\nclass PageAbout extends Component {\r\n  render(){\r\n    return(\r\n      <div>\r\n        <Jumbotron fluid>\r\n          <Container>\r\n            <h1 className=\"display-4\">ABOUT</h1>\r\n            <p className=\"lead\">A word from the developer:</p>\r\n          </Container>\r\n        </Jumbotron>\r\n        <Container>\r\n          <p>\r\n            Thank you for visiting my website. My name is Shuen Yasui and I created this website to showcase my various coding projects and to share what I have learned throughout this journey. If you found my projects interesting, leave a star on its GitHub repository.\r\n          </p>\r\n          <a href=\"mailto:shuenyasui@gmail.com\"><p>Contact me</p></a>\r\n          <a href=\"https://github.com/shuen-yasui\"><p>GitHub</p></a>\r\n          <a href=\"https://www.linkedin.com/in/shuenyasui/\"><p>LinkedIn</p></a>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default PageAbout\r\n","import React, { Component } from 'react';\r\nimport ProjectEntry from './ProjectEntry';\r\nimport PageAbout from './PageAbout';\r\nimport Container from 'react-bootstrap/Container'\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport Nav from 'react-bootstrap/Nav'\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.pageState = <ProjectEntry />;\r\n  }\r\n  onMouseClick(e,page){\r\n    switch (page) {\r\n      case \"projects\":\r\n        this.setState(this.pageState = <ProjectEntry />);\r\n        break;\r\n      case \"about\":\r\n        this.setState(this.pageState = <PageAbout />);\r\n        break;\r\n      default:\r\n        this.setState(this.pageState = <ProjectEntry />);\r\n    }\r\n  }\r\n  render(){\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\" sticky=\"top\">\r\n            <Container>\r\n              <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n              <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                  <Nav.Link onClick={(e) => this.onMouseClick(e,\"projects\")}>PROJECTS</Nav.Link>\r\n                  <Nav.Link onClick={(e) => this.onMouseClick(e,\"about\")}>ABOUT</Nav.Link>\r\n                </Nav>\r\n                <Navbar.Brand>SHUEN YASUI</Navbar.Brand>\r\n              </Navbar.Collapse>\r\n            </Container>\r\n          </Navbar>\r\n          {this.pageState}\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}